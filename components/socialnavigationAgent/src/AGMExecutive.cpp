// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AGMExecutive.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <AGMExecutive.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompAGMExecutive__AGMExecutive__activate_name = "activate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__deactivate_name = "deactivate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name = "structuralChangeProposal";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__symbolUpdate_name = "symbolUpdate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__symbolsUpdate_name = "symbolsUpdate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__edgeUpdate_name = "edgeUpdate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__edgesUpdate_name = "edgesUpdate";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__setMission_name = "setMission";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__getModel_name = "getModel";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__getNode_name = "getNode";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__getEdge_name = "getEdge";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__getData_name = "getData";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name = "broadcastModel";

const ::std::string __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name = "broadcastPlan";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name = "update";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name = "structuralChange";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name = "symbolUpdated";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__symbolsUpdated_name = "symbolsUpdated";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name = "edgeUpdated";

const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name = "edgesUpdated";

}

namespace
{

const char* __RoboCompAGMExecutive__Locked_name = "RoboCompAGMExecutive::Locked";

struct __F__RoboCompAGMExecutive__Locked : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompAGMExecutive::Locked();
    }
};

class __F__RoboCompAGMExecutive__Locked__Init
{
public:

    __F__RoboCompAGMExecutive__Locked__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompAGMExecutive::Locked", new __F__RoboCompAGMExecutive__Locked);
    }

    ~__F__RoboCompAGMExecutive__Locked__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompAGMExecutive::Locked");
    }
};

const __F__RoboCompAGMExecutive__Locked__Init __F__RoboCompAGMExecutive__Locked__i;

}

RoboCompAGMExecutive::Locked::~Locked() throw()
{
}

::std::string
RoboCompAGMExecutive::Locked::ice_name() const
{
    return __RoboCompAGMExecutive__Locked_name;
}

RoboCompAGMExecutive::Locked*
RoboCompAGMExecutive::Locked::ice_clone() const
{
    return new Locked(*this);
}

void
RoboCompAGMExecutive::Locked::ice_throw() const
{
    throw *this;
}

void
RoboCompAGMExecutive::Locked::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompAGMExecutive::Locked", -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::Locked::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompAGMExecutive__OldModel_name = "RoboCompAGMExecutive::OldModel";

struct __F__RoboCompAGMExecutive__OldModel : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompAGMExecutive::OldModel();
    }
};

class __F__RoboCompAGMExecutive__OldModel__Init
{
public:

    __F__RoboCompAGMExecutive__OldModel__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompAGMExecutive::OldModel", new __F__RoboCompAGMExecutive__OldModel);
    }

    ~__F__RoboCompAGMExecutive__OldModel__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompAGMExecutive::OldModel");
    }
};

const __F__RoboCompAGMExecutive__OldModel__Init __F__RoboCompAGMExecutive__OldModel__i;

}

RoboCompAGMExecutive::OldModel::~OldModel() throw()
{
}

::std::string
RoboCompAGMExecutive::OldModel::ice_name() const
{
    return __RoboCompAGMExecutive__OldModel_name;
}

RoboCompAGMExecutive::OldModel*
RoboCompAGMExecutive::OldModel::ice_clone() const
{
    return new OldModel(*this);
}

void
RoboCompAGMExecutive::OldModel::ice_throw() const
{
    throw *this;
}

void
RoboCompAGMExecutive::OldModel::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompAGMExecutive::OldModel", -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::OldModel::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompAGMExecutive__InvalidChange_name = "RoboCompAGMExecutive::InvalidChange";

struct __F__RoboCompAGMExecutive__InvalidChange : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompAGMExecutive::InvalidChange();
    }
};

class __F__RoboCompAGMExecutive__InvalidChange__Init
{
public:

    __F__RoboCompAGMExecutive__InvalidChange__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompAGMExecutive::InvalidChange", new __F__RoboCompAGMExecutive__InvalidChange);
    }

    ~__F__RoboCompAGMExecutive__InvalidChange__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompAGMExecutive::InvalidChange");
    }
};

const __F__RoboCompAGMExecutive__InvalidChange__Init __F__RoboCompAGMExecutive__InvalidChange__i;

}

RoboCompAGMExecutive::InvalidChange::~InvalidChange() throw()
{
}

::std::string
RoboCompAGMExecutive::InvalidChange::ice_name() const
{
    return __RoboCompAGMExecutive__InvalidChange_name;
}

RoboCompAGMExecutive::InvalidChange*
RoboCompAGMExecutive::InvalidChange::ice_clone() const
{
    return new InvalidChange(*this);
}

void
RoboCompAGMExecutive::InvalidChange::ice_throw() const
{
    throw *this;
}

void
RoboCompAGMExecutive::InvalidChange::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompAGMExecutive::InvalidChange", -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::InvalidChange::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutive::upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutive* p) { return p; }

void
::IceProxy::RoboCompAGMExecutive::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutive>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompAGMExecutive::AGMExecutive;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::activate(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__activate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->activate(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__activate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__activate_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_activate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__activate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::deactivate(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__deactivate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->deactivate(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__deactivate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__deactivate_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_deactivate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__deactivate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->structuralChangeProposal(w, sender, log, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(w);
        __os->write(sender);
        __os->write(log);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_structuralChangeProposal(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompAGMExecutive::InvalidChange&)
            {
                throw;
            }
            catch(const ::RoboCompAGMExecutive::Locked&)
            {
                throw;
            }
            catch(const ::RoboCompAGMExecutive::OldModel&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__symbolUpdate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->symbolUpdate(n, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__symbolUpdate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__symbolUpdate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(n);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_symbolUpdate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__symbolUpdate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__symbolsUpdate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->symbolsUpdate(ns, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__symbolsUpdate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__symbolsUpdate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ns);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_symbolsUpdate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__symbolsUpdate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__edgeUpdate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->edgeUpdate(e, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__edgeUpdate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__edgeUpdate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(e);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_edgeUpdate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__edgeUpdate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__edgesUpdate_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->edgesUpdate(es, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__edgesUpdate_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__edgesUpdate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(es);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_edgesUpdate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__edgesUpdate_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::setMission(const ::std::string& path, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__setMission_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->setMission(path, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission(const ::std::string& path, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__setMission_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__setMission_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_setMission(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__setMission_name);
}

::RoboCompAGMWorldModel::World
IceProxy::RoboCompAGMExecutive::AGMExecutive::getModel(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__getModel_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getModel_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            return __del->getModel(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getModel_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__getModel_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__getModel_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompAGMWorldModel::World
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getModel(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompAGMExecutive__AGMExecutive__getModel_name);
    ::RoboCompAGMWorldModel::World __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompAGMWorldModel::Node
IceProxy::RoboCompAGMExecutive::AGMExecutive::getNode(::Ice::Int identifier, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__getNode_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getNode_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            return __del->getNode(identifier, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode(::Ice::Int identifier, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getNode_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__getNode_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__getNode_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(identifier);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompAGMWorldModel::Node
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getNode(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompAGMExecutive__AGMExecutive__getNode_name);
    ::RoboCompAGMWorldModel::Node __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompAGMWorldModel::Edge
IceProxy::RoboCompAGMExecutive::AGMExecutive::getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__getEdge_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getEdge_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            return __del->getEdge(srcIdentifier, dstIdentifier, label, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getEdge_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__getEdge_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__getEdge_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(srcIdentifier);
        __os->write(dstIdentifier);
        __os->write(label);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompAGMWorldModel::Edge
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getEdge(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompAGMExecutive__AGMExecutive__getEdge_name);
    ::RoboCompAGMWorldModel::Edge __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__getData_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getData_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->getData(world, target, plan, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompAGMExecutive__AGMExecutive__getData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__getData_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__getData_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompAGMExecutive__AGMExecutive__getData_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(world);
        __is->read(target);
        __is->read(plan);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::broadcastModel(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->broadcastModel(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_broadcastModel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::broadcastPlan(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutive* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutive*>(__delBase.get());
            __del->broadcastPlan(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_broadcastPlan(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name);
}

const ::std::string&
IceProxy::RoboCompAGMExecutive::AGMExecutive::ice_staticId()
{
    return ::RoboCompAGMExecutive::AGMExecutive::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutive::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompAGMExecutive::AGMExecutive);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutive::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompAGMExecutive::AGMExecutive);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutive::AGMExecutive::__newInstance() const
{
    return new AGMExecutive;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutive::upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* p) { return p; }

void
::IceProxy::RoboCompAGMExecutive::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(__delBase.get());
            __del->update(world, mission, plan, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(world);
        __os->write(mission);
        __os->write(plan);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::end_update(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name);
}

const ::std::string&
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId()
{
    return ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__newInstance() const
{
    return new AGMExecutiveVisualizationTopic;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutive::upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic* p) { return p; }

void
::IceProxy::RoboCompAGMExecutive::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->structuralChange(w, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(w);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_structuralChange(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->symbolUpdated(modification, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_symbolUpdated(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolsUpdated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->symbolsUpdated(modifications, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolsUpdated_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__symbolsUpdated_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modifications);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_symbolsUpdated(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolsUpdated_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->edgeUpdated(modification, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_edgeUpdated(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name);
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic* __del = dynamic_cast< ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic*>(__delBase.get());
            __del->edgesUpdated(modifications, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(modifications);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::end_edgesUpdated(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name);
}

const ::std::string&
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId()
{
    return ::RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic::__newInstance() const
{
    return new AGMExecutiveTopic;
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::activate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__activate_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::deactivate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__deactivate_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(w);
        __os->write(sender);
        __os->write(log);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompAGMExecutive::InvalidChange&)
            {
                throw;
            }
            catch(const ::RoboCompAGMExecutive::Locked&)
            {
                throw;
            }
            catch(const ::RoboCompAGMExecutive::OldModel&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__symbolUpdate_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(n);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__symbolsUpdate_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ns);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__edgeUpdate_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(e);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__edgesUpdate_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(es);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::setMission(const ::std::string& path, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__setMission_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::RoboCompAGMWorldModel::World
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::getModel(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__getModel_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompAGMWorldModel::World __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompAGMWorldModel::Node
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::getNode(::Ice::Int identifier, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__getNode_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(identifier);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompAGMWorldModel::Node __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompAGMWorldModel::Edge
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__getEdge_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(srcIdentifier);
        __os->write(dstIdentifier);
        __os->write(label);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompAGMWorldModel::Edge __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__getData_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(world);
        __is->read(target);
        __is->read(plan);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::broadcastModel(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutive::broadcastPlan(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(world);
        __os->write(mission);
        __os->write(plan);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(w);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__symbolsUpdated_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modifications);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modification);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompAGMExecutive::AGMExecutiveTopic::edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(modifications);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::activate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->activate(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__activate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::deactivate(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->deactivate(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__deactivate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::World& __p_w, const ::std::string& __p_sender, const ::std::string& __p_log, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_w(__p_w),
            _m_sender(__p_sender),
            _m_log(__p_log)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->structuralChangeProposal(_m_w, _m_sender, _m_log, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::World& _m_w;
        const ::std::string& _m_sender;
        const ::std::string& _m_log;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__structuralChangeProposal_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(w, sender, log, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompAGMExecutive::InvalidChange&)
    {
        throw;
    }
    catch(const ::RoboCompAGMExecutive::Locked&)
    {
        throw;
    }
    catch(const ::RoboCompAGMExecutive::OldModel&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::Node& __p_n, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_n(__p_n)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->symbolUpdate(_m_n, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::Node& _m_n;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__symbolUpdate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(n, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::NodeSequence& __p_ns, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ns(__p_ns)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->symbolsUpdate(_m_ns, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::NodeSequence& _m_ns;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__symbolsUpdate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ns, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::Edge& __p_e, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_e(__p_e)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->edgeUpdate(_m_e, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::Edge& _m_e;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__edgeUpdate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(e, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::EdgeSequence& __p_es, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_es(__p_es)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->edgesUpdate(_m_es, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::EdgeSequence& _m_es;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__edgesUpdate_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(es, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::setMission(const ::std::string& path, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_path, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_path(__p_path)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setMission(_m_path, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_path;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__setMission_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(path, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::RoboCompAGMWorldModel::World
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::getModel(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompAGMWorldModel::World& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getModel(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompAGMWorldModel::World& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__getModel_name, ::Ice::Normal, __context);
    ::RoboCompAGMWorldModel::World __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompAGMWorldModel::Node
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::getNode(::Ice::Int identifier, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompAGMWorldModel::Node& __result, ::Ice::Int __p_identifier, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_identifier(__p_identifier)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getNode(_m_identifier, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompAGMWorldModel::Node& _result;
        ::Ice::Int _m_identifier;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__getNode_name, ::Ice::Normal, __context);
    ::RoboCompAGMWorldModel::Node __result;
    try
    {
        _DirectI __direct(__result, identifier, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompAGMWorldModel::Edge
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompAGMWorldModel::Edge& __result, ::Ice::Int __p_srcIdentifier, ::Ice::Int __p_dstIdentifier, const ::std::string& __p_label, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_srcIdentifier(__p_srcIdentifier),
            _m_dstIdentifier(__p_dstIdentifier),
            _m_label(__p_label)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getEdge(_m_srcIdentifier, _m_dstIdentifier, _m_label, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompAGMWorldModel::Edge& _result;
        ::Ice::Int _m_srcIdentifier;
        ::Ice::Int _m_dstIdentifier;
        const ::std::string& _m_label;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__getEdge_name, ::Ice::Normal, __context);
    ::RoboCompAGMWorldModel::Edge __result;
    try
    {
        _DirectI __direct(__result, srcIdentifier, dstIdentifier, label, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompAGMWorldModel::World& __p_world, ::std::string& __p_target, ::RoboCompPlanning::Plan& __p_plan, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_world(__p_world),
            _m_target(__p_target),
            _m_plan(__p_plan)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->getData(_m_world, _m_target, _m_plan, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompAGMWorldModel::World& _m_world;
        ::std::string& _m_target;
        ::RoboCompPlanning::Plan& _m_plan;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__getData_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(world, target, plan, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::broadcastModel(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->broadcastModel(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__broadcastModel_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutive::broadcastPlan(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutive* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutive*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->broadcastPlan(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutive__broadcastPlan_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::World& __p_world, const ::std::string& __p_mission, const ::RoboCompPlanning::Plan& __p_plan, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_world(__p_world),
            _m_mission(__p_mission),
            _m_plan(__p_plan)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->update(_m_world, _m_mission, _m_plan, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::World& _m_world;
        const ::std::string& _m_mission;
        const ::RoboCompPlanning::Plan& _m_plan;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic__update_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(world, mission, plan, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::World& __p_w, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_w(__p_w)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->structuralChange(_m_w, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::World& _m_w;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__structuralChange_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(w, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::Node& __p_modification, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modification(__p_modification)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->symbolUpdated(_m_modification, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::Node& _m_modification;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolUpdated_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modification, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::NodeSequence& __p_modifications, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modifications(__p_modifications)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->symbolsUpdated(_m_modifications, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::NodeSequence& _m_modifications;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__symbolsUpdated_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modifications, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::Edge& __p_modification, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modification(__p_modification)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->edgeUpdated(_m_modification, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::Edge& _m_modification;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__edgeUpdated_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modification, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompAGMExecutive::AGMExecutiveTopic::edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompAGMWorldModel::EdgeSequence& __p_modifications, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_modifications(__p_modifications)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompAGMExecutive::AGMExecutiveTopic* servant = dynamic_cast< ::RoboCompAGMExecutive::AGMExecutiveTopic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->edgesUpdated(_m_modifications, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompAGMWorldModel::EdgeSequence& _m_modifications;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompAGMExecutive__AGMExecutiveTopic__edgesUpdated_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(modifications, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompAGMExecutive::upCast(::RoboCompAGMExecutive::AGMExecutive* p) { return p; }

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutive_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutive"
};

}

bool
RoboCompAGMExecutive::AGMExecutive::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompAGMExecutive__AGMExecutive_ids, __RoboCompAGMExecutive__AGMExecutive_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompAGMExecutive::AGMExecutive::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompAGMExecutive__AGMExecutive_ids[0], &__RoboCompAGMExecutive__AGMExecutive_ids[2]);
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutive::ice_id(const ::Ice::Current&) const
{
    return __RoboCompAGMExecutive__AGMExecutive_ids[1];
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutive::ice_staticId()
{
    return __RoboCompAGMExecutive__AGMExecutive_ids[1];
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___activate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    activate(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___deactivate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    deactivate(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___structuralChangeProposal(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::World w;
    ::std::string sender;
    ::std::string log;
    __is->read(w);
    __is->read(sender);
    __is->read(log);
    __inS.endReadParams();
    try
    {
        structuralChangeProposal(w, sender, log, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompAGMExecutive::InvalidChange& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompAGMExecutive::Locked& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompAGMExecutive::OldModel& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___symbolUpdate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Node n;
    __is->read(n);
    __inS.endReadParams();
    symbolUpdate(n, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___symbolsUpdate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::NodeSequence ns;
    __is->read(ns);
    __inS.endReadParams();
    symbolsUpdate(ns, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___edgeUpdate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Edge e;
    __is->read(e);
    __inS.endReadParams();
    edgeUpdate(e, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___edgesUpdate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::EdgeSequence es;
    __is->read(es);
    __inS.endReadParams();
    edgesUpdate(es, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___setMission(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string path;
    __is->read(path);
    __inS.endReadParams();
    setMission(path, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___getModel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompAGMWorldModel::World __ret = getModel(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___getNode(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int identifier;
    __is->read(identifier);
    __inS.endReadParams();
    ::RoboCompAGMWorldModel::Node __ret = getNode(identifier, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___getEdge(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int srcIdentifier;
    ::Ice::Int dstIdentifier;
    ::std::string label;
    __is->read(srcIdentifier);
    __is->read(dstIdentifier);
    __is->read(label);
    __inS.endReadParams();
    ::RoboCompAGMWorldModel::Edge __ret = getEdge(srcIdentifier, dstIdentifier, label, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___getData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompAGMWorldModel::World world;
    ::std::string target;
    ::RoboCompPlanning::Plan plan;
    getData(world, target, plan, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(world);
    __os->write(target);
    __os->write(plan);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___broadcastModel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    broadcastModel(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::___broadcastPlan(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    broadcastPlan(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutive_all[] =
{
    "activate",
    "broadcastModel",
    "broadcastPlan",
    "deactivate",
    "edgeUpdate",
    "edgesUpdate",
    "getData",
    "getEdge",
    "getModel",
    "getNode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setMission",
    "structuralChangeProposal",
    "symbolUpdate",
    "symbolsUpdate"
};

}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutive::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompAGMExecutive__AGMExecutive_all, __RoboCompAGMExecutive__AGMExecutive_all + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompAGMExecutive__AGMExecutive_all)
    {
        case 0:
        {
            return ___activate(in, current);
        }
        case 1:
        {
            return ___broadcastModel(in, current);
        }
        case 2:
        {
            return ___broadcastPlan(in, current);
        }
        case 3:
        {
            return ___deactivate(in, current);
        }
        case 4:
        {
            return ___edgeUpdate(in, current);
        }
        case 5:
        {
            return ___edgesUpdate(in, current);
        }
        case 6:
        {
            return ___getData(in, current);
        }
        case 7:
        {
            return ___getEdge(in, current);
        }
        case 8:
        {
            return ___getModel(in, current);
        }
        case 9:
        {
            return ___getNode(in, current);
        }
        case 10:
        {
            return ___ice_id(in, current);
        }
        case 11:
        {
            return ___ice_ids(in, current);
        }
        case 12:
        {
            return ___ice_isA(in, current);
        }
        case 13:
        {
            return ___ice_ping(in, current);
        }
        case 14:
        {
            return ___setMission(in, current);
        }
        case 15:
        {
            return ___structuralChangeProposal(in, current);
        }
        case 16:
        {
            return ___symbolUpdate(in, current);
        }
        case 17:
        {
            return ___symbolsUpdate(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompAGMExecutive::AGMExecutive::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::AGMExecutive::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompAGMExecutive::__patch(AGMExecutivePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompAGMExecutive::AGMExecutivePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompAGMExecutive::AGMExecutive::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompAGMExecutive::upCast(::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic* p) { return p; }

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic"
};

}

bool
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[0], &__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[2]);
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_id(const ::Ice::Current&) const
{
    return __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[1];
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId()
{
    return __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_ids[1];
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::___update(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::World world;
    ::std::string mission;
    ::RoboCompPlanning::Plan plan;
    __is->read(world);
    __is->read(mission);
    __is->read(plan);
    __inS.endReadParams();
    update(world, mission, plan, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "update"
};

}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all, __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompAGMExecutive__AGMExecutiveVisualizationTopic_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___update(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompAGMExecutive::__patch(AGMExecutiveVisualizationTopicPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopicPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompAGMExecutive::upCast(::RoboCompAGMExecutive::AGMExecutiveTopic* p) { return p; }

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutiveTopic"
};

}

bool
RoboCompAGMExecutive::AGMExecutiveTopic::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompAGMExecutive__AGMExecutiveTopic_ids, __RoboCompAGMExecutive__AGMExecutiveTopic_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompAGMExecutive::AGMExecutiveTopic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompAGMExecutive__AGMExecutiveTopic_ids[0], &__RoboCompAGMExecutive__AGMExecutiveTopic_ids[2]);
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveTopic::ice_id(const ::Ice::Current&) const
{
    return __RoboCompAGMExecutive__AGMExecutiveTopic_ids[1];
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId()
{
    return __RoboCompAGMExecutive__AGMExecutiveTopic_ids[1];
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___structuralChange(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::World w;
    __is->read(w);
    __inS.endReadParams();
    structuralChange(w, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___symbolUpdated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Node modification;
    __is->read(modification);
    __inS.endReadParams();
    symbolUpdated(modification, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___symbolsUpdated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::NodeSequence modifications;
    __is->read(modifications);
    __inS.endReadParams();
    symbolsUpdated(modifications, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___edgeUpdated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::Edge modification;
    __is->read(modification);
    __inS.endReadParams();
    edgeUpdated(modification, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::___edgesUpdated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompAGMWorldModel::EdgeSequence modifications;
    __is->read(modifications);
    __inS.endReadParams();
    edgesUpdated(modifications, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompAGMExecutive__AGMExecutiveTopic_all[] =
{
    "edgeUpdated",
    "edgesUpdated",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "structuralChange",
    "symbolUpdated",
    "symbolsUpdated"
};

}

::Ice::DispatchStatus
RoboCompAGMExecutive::AGMExecutiveTopic::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompAGMExecutive__AGMExecutiveTopic_all, __RoboCompAGMExecutive__AGMExecutiveTopic_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompAGMExecutive__AGMExecutiveTopic_all)
    {
        case 0:
        {
            return ___edgeUpdated(in, current);
        }
        case 1:
        {
            return ___edgesUpdated(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___structuralChange(in, current);
        }
        case 7:
        {
            return ___symbolUpdated(in, current);
        }
        case 8:
        {
            return ___symbolsUpdated(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompAGMExecutive::AGMExecutiveTopic::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompAGMExecutive::AGMExecutiveTopic::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompAGMExecutive::__patch(AGMExecutiveTopicPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompAGMExecutive::AGMExecutiveTopicPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompAGMExecutive::AGMExecutiveTopic::ice_staticId(), v);
    }
}
