// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `AGMExecutive.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____AGMExecutive_h__
#define ____AGMExecutive_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <AGMWorldModel.h>
#include <Planning.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompAGMExecutive
{

class AGMExecutive;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutive>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutive*);

class AGMExecutiveVisualizationTopic;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*);

class AGMExecutiveTopic;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic*);

}

}

namespace RoboCompAGMExecutive
{

class AGMExecutive;
bool operator==(const AGMExecutive&, const AGMExecutive&);
bool operator<(const AGMExecutive&, const AGMExecutive&);
::Ice::Object* upCast(::RoboCompAGMExecutive::AGMExecutive*);
typedef ::IceInternal::Handle< ::RoboCompAGMExecutive::AGMExecutive> AGMExecutivePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutive> AGMExecutivePrx;
void __patch(AGMExecutivePtr&, const ::Ice::ObjectPtr&);

class AGMExecutiveVisualizationTopic;
bool operator==(const AGMExecutiveVisualizationTopic&, const AGMExecutiveVisualizationTopic&);
bool operator<(const AGMExecutiveVisualizationTopic&, const AGMExecutiveVisualizationTopic&);
::Ice::Object* upCast(::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic*);
typedef ::IceInternal::Handle< ::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic> AGMExecutiveVisualizationTopicPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic> AGMExecutiveVisualizationTopicPrx;
void __patch(AGMExecutiveVisualizationTopicPtr&, const ::Ice::ObjectPtr&);

class AGMExecutiveTopic;
bool operator==(const AGMExecutiveTopic&, const AGMExecutiveTopic&);
bool operator<(const AGMExecutiveTopic&, const AGMExecutiveTopic&);
::Ice::Object* upCast(::RoboCompAGMExecutive::AGMExecutiveTopic*);
typedef ::IceInternal::Handle< ::RoboCompAGMExecutive::AGMExecutiveTopic> AGMExecutiveTopicPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutiveTopic> AGMExecutiveTopicPrx;
void __patch(AGMExecutiveTopicPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompAGMExecutive
{

class Locked : public ::Ice::UserException
{
public:

    Locked() {}
    virtual ~Locked() throw();

    virtual ::std::string ice_name() const;
    virtual Locked* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static Locked __Locked_init;

class OldModel : public ::Ice::UserException
{
public:

    OldModel() {}
    virtual ~OldModel() throw();

    virtual ::std::string ice_name() const;
    virtual OldModel* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class InvalidChange : public ::Ice::UserException
{
public:

    InvalidChange() {}
    virtual ~InvalidChange() throw();

    virtual ::std::string ice_name() const;
    virtual InvalidChange* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompAGMExecutive::Locked>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompAGMExecutive::OldModel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompAGMExecutive::InvalidChange>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace RoboCompAGMExecutive
{

class Callback_AGMExecutive_activate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_activate_Base> Callback_AGMExecutive_activatePtr;

class Callback_AGMExecutive_deactivate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_deactivate_Base> Callback_AGMExecutive_deactivatePtr;

class Callback_AGMExecutive_structuralChangeProposal_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_structuralChangeProposal_Base> Callback_AGMExecutive_structuralChangeProposalPtr;

class Callback_AGMExecutive_symbolUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_symbolUpdate_Base> Callback_AGMExecutive_symbolUpdatePtr;

class Callback_AGMExecutive_symbolsUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_symbolsUpdate_Base> Callback_AGMExecutive_symbolsUpdatePtr;

class Callback_AGMExecutive_edgeUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_edgeUpdate_Base> Callback_AGMExecutive_edgeUpdatePtr;

class Callback_AGMExecutive_edgesUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_edgesUpdate_Base> Callback_AGMExecutive_edgesUpdatePtr;

class Callback_AGMExecutive_setMission_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_setMission_Base> Callback_AGMExecutive_setMissionPtr;

class Callback_AGMExecutive_getModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getModel_Base> Callback_AGMExecutive_getModelPtr;

class Callback_AGMExecutive_getNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getNode_Base> Callback_AGMExecutive_getNodePtr;

class Callback_AGMExecutive_getEdge_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getEdge_Base> Callback_AGMExecutive_getEdgePtr;

class Callback_AGMExecutive_getData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getData_Base> Callback_AGMExecutive_getDataPtr;

class Callback_AGMExecutive_broadcastModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_broadcastModel_Base> Callback_AGMExecutive_broadcastModelPtr;

class Callback_AGMExecutive_broadcastPlan_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_broadcastPlan_Base> Callback_AGMExecutive_broadcastPlanPtr;

class Callback_AGMExecutiveVisualizationTopic_update_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveVisualizationTopic_update_Base> Callback_AGMExecutiveVisualizationTopic_updatePtr;

class Callback_AGMExecutiveTopic_structuralChange_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_structuralChange_Base> Callback_AGMExecutiveTopic_structuralChangePtr;

class Callback_AGMExecutiveTopic_symbolUpdated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_symbolUpdated_Base> Callback_AGMExecutiveTopic_symbolUpdatedPtr;

class Callback_AGMExecutiveTopic_symbolsUpdated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_symbolsUpdated_Base> Callback_AGMExecutiveTopic_symbolsUpdatedPtr;

class Callback_AGMExecutiveTopic_edgeUpdated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_edgeUpdated_Base> Callback_AGMExecutiveTopic_edgeUpdatedPtr;

class Callback_AGMExecutiveTopic_edgesUpdated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_edgesUpdated_Base> Callback_AGMExecutiveTopic_edgesUpdatedPtr;

}

namespace IceProxy
{

namespace RoboCompAGMExecutive
{

class AGMExecutive : virtual public ::IceProxy::Ice::Object
{
public:

    void activate()
    {
        activate(0);
    }
    void activate(const ::Ice::Context& __ctx)
    {
        activate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_activate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_activate(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_activate(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_activate()
    {
        return begin_activate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx)
    {
        return begin_activate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::RoboCompAGMExecutive::Callback_AGMExecutive_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(&__ctx, __del, __cookie);
    }

    void end_activate(const ::Ice::AsyncResultPtr&);
    
private:

    void activate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void deactivate()
    {
        deactivate(0);
    }
    void deactivate(const ::Ice::Context& __ctx)
    {
        deactivate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_deactivate(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_deactivate(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_deactivate()
    {
        return begin_deactivate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx)
    {
        return begin_deactivate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::RoboCompAGMExecutive::Callback_AGMExecutive_deactivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_deactivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(&__ctx, __del, __cookie);
    }

    void end_deactivate(const ::Ice::AsyncResultPtr&);
    
private:

    void deactivate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log)
    {
        structuralChangeProposal(w, sender, log, 0);
    }
    void structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& __ctx)
    {
        structuralChangeProposal(w, sender, log, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_structuralChangeProposal(w, sender, log, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_structuralChangeProposal(w, sender, log, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_structuralChangeProposal(w, sender, log, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_structuralChangeProposal(w, sender, log, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_structuralChangeProposal(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_structuralChangeProposal(w, sender, log, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log)
    {
        return begin_structuralChangeProposal(w, sender, log, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& __ctx)
    {
        return begin_structuralChangeProposal(w, sender, log, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChangeProposal(w, sender, log, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChangeProposal(w, sender, log, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::RoboCompAGMExecutive::Callback_AGMExecutive_structuralChangeProposalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChangeProposal(w, sender, log, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_structuralChangeProposalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChangeProposal(w, sender, log, &__ctx, __del, __cookie);
    }

    void end_structuralChangeProposal(const ::Ice::AsyncResultPtr&);
    
private:

    void structuralChangeProposal(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void symbolUpdate(const ::RoboCompAGMWorldModel::Node& n)
    {
        symbolUpdate(n, 0);
    }
    void symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& __ctx)
    {
        symbolUpdate(n, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolUpdate(n, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolUpdate(n, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolUpdate(n, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolUpdate(n, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n)
    {
        return begin_symbolUpdate(n, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& __ctx)
    {
        return begin_symbolUpdate(n, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdate(n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdate(n, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdate(n, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdate(n, &__ctx, __del, __cookie);
    }

    void end_symbolUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void symbolUpdate(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns)
    {
        symbolsUpdate(ns, 0);
    }
    void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& __ctx)
    {
        symbolsUpdate(ns, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolsUpdate(ns, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolsUpdate(ns, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolsUpdate(ns, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolsUpdate(ns, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns)
    {
        return begin_symbolsUpdate(ns, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& __ctx)
    {
        return begin_symbolsUpdate(ns, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdate(ns, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdate(ns, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolsUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdate(ns, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolsUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdate(ns, &__ctx, __del, __cookie);
    }

    void end_symbolsUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e)
    {
        edgeUpdate(e, 0);
    }
    void edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& __ctx)
    {
        edgeUpdate(e, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgeUpdate(e, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgeUpdate(e, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgeUpdate(e, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgeUpdate(e, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e)
    {
        return begin_edgeUpdate(e, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& __ctx)
    {
        return begin_edgeUpdate(e, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdate(e, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdate(e, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgeUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdate(e, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgeUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdate(e, &__ctx, __del, __cookie);
    }

    void end_edgeUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void edgeUpdate(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es)
    {
        edgesUpdate(es, 0);
    }
    void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& __ctx)
    {
        edgesUpdate(es, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgesUpdate(es, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgesUpdate(es, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgesUpdate(es, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgesUpdate(es, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es)
    {
        return begin_edgesUpdate(es, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& __ctx)
    {
        return begin_edgesUpdate(es, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdate(es, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdate(es, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgesUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdate(es, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgesUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdate(es, &__ctx, __del, __cookie);
    }

    void end_edgesUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMission(const ::std::string& path)
    {
        setMission(path, 0);
    }
    void setMission(const ::std::string& path, const ::Ice::Context& __ctx)
    {
        setMission(path, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setMission(const ::std::string& path, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMission(path, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setMission(const ::std::string& path, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMission(path, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMission(const ::std::string& path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMission(path, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMission(const ::std::string& path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMission(path, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path)
    {
        return begin_setMission(path, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::Context& __ctx)
    {
        return begin_setMission(path, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMission(path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMission(path, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::RoboCompAGMExecutive::Callback_AGMExecutive_setMissionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMission(path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_setMissionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMission(path, &__ctx, __del, __cookie);
    }

    void end_setMission(const ::Ice::AsyncResultPtr&);
    
private:

    void setMission(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMission(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompAGMWorldModel::World getModel()
    {
        return getModel(0);
    }
    ::RoboCompAGMWorldModel::World getModel(const ::Ice::Context& __ctx)
    {
        return getModel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getModel(const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::World&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getModel(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getModel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::World&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getModel(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getModel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getModel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::World&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompAGMWorldModel::World&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
                ::RoboCompAGMWorldModel::World __ret;
                try
                {
                    __ret = __proxy->end_getModel(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompAGMWorldModel::World&)> _response;
        };
        return begin_getModel(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getModel()
    {
        return begin_getModel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx)
    {
        return begin_getModel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::RoboCompAGMExecutive::Callback_AGMExecutive_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::RoboCompAGMWorldModel::World end_getModel(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompAGMWorldModel::World getModel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompAGMWorldModel::Node getNode(::Ice::Int identifier)
    {
        return getNode(identifier, 0);
    }
    ::RoboCompAGMWorldModel::Node getNode(::Ice::Int identifier, const ::Ice::Context& __ctx)
    {
        return getNode(identifier, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getNode(::Ice::Int identifier, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::Node&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNode(identifier, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNode(::Ice::Int identifier, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNode(identifier, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getNode(::Ice::Int identifier, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::Node&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNode(identifier, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNode(::Ice::Int identifier, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNode(identifier, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getNode(::Ice::Int identifier, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::Node&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompAGMWorldModel::Node&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
                ::RoboCompAGMWorldModel::Node __ret;
                try
                {
                    __ret = __proxy->end_getNode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompAGMWorldModel::Node&)> _response;
        };
        return begin_getNode(identifier, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier)
    {
        return begin_getNode(identifier, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::Context& __ctx)
    {
        return begin_getNode(identifier, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNode(identifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNode(identifier, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNode(identifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNode(identifier, &__ctx, __del, __cookie);
    }

    ::RoboCompAGMWorldModel::Node end_getNode(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompAGMWorldModel::Node getNode(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label)
    {
        return getEdge(srcIdentifier, dstIdentifier, label, 0);
    }
    ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& __ctx)
    {
        return getEdge(srcIdentifier, dstIdentifier, label, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::Edge&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEdge(srcIdentifier, dstIdentifier, label, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::Edge&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEdge(srcIdentifier, dstIdentifier, label, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::Edge&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompAGMWorldModel::Edge&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
                ::RoboCompAGMWorldModel::Edge __ret;
                try
                {
                    __ret = __proxy->end_getEdge(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompAGMWorldModel::Edge&)> _response;
        };
        return begin_getEdge(srcIdentifier, dstIdentifier, label, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label)
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& __ctx)
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getEdgePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getEdgePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEdge(srcIdentifier, dstIdentifier, label, &__ctx, __del, __cookie);
    }

    ::RoboCompAGMWorldModel::Edge end_getEdge(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan)
    {
        getData(world, target, plan, 0);
    }
    void getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context& __ctx)
    {
        getData(world, target, plan, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
                ::RoboCompAGMWorldModel::World world;
                ::std::string target;
                ::RoboCompPlanning::Plan plan;
                try
                {
                    __proxy->end_getData(world, target, plan, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(world, target, plan);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&)> _response;
        };
        return begin_getData(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getData()
    {
        return begin_getData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx)
    {
        return begin_getData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::RoboCompAGMExecutive::Callback_AGMExecutive_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    void end_getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::AsyncResultPtr&);
    
private:

    void getData(::RoboCompAGMWorldModel::World&, ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void broadcastModel()
    {
        broadcastModel(0);
    }
    void broadcastModel(const ::Ice::Context& __ctx)
    {
        broadcastModel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_broadcastModel(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_broadcastModel(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_broadcastModel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_broadcastModel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_broadcastModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_broadcastModel(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_broadcastModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_broadcastModel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_broadcastModel()
    {
        return begin_broadcastModel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::Context& __ctx)
    {
        return begin_broadcastModel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastModel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastModel(&__ctx, __del, __cookie);
    }

    void end_broadcastModel(const ::Ice::AsyncResultPtr&);
    
private:

    void broadcastModel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void broadcastPlan()
    {
        broadcastPlan(0);
    }
    void broadcastPlan(const ::Ice::Context& __ctx)
    {
        broadcastPlan(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_broadcastPlan(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_broadcastPlan(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_broadcastPlan(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_broadcastPlan(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_broadcastPlan(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_broadcastPlan(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_broadcastPlan(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_broadcastPlan(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_broadcastPlan()
    {
        return begin_broadcastPlan(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::Context& __ctx)
    {
        return begin_broadcastPlan(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastPlan(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastPlan(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastPlanPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastPlan(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastPlanPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_broadcastPlan(&__ctx, __del, __cookie);
    }

    void end_broadcastPlan(const ::Ice::AsyncResultPtr&);
    
private:

    void broadcastPlan(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_secure(bool __secure) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_twoway() const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_oneway() const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_batchOneway() const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_datagram() const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_batchDatagram() const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_compress(bool __compress) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutive> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AGMExecutive*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AGMExecutiveVisualizationTopic : virtual public ::IceProxy::Ice::Object
{
public:

    void update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan)
    {
        update(world, mission, plan, 0);
    }
    void update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context& __ctx)
    {
        update(world, mission, plan, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_update(world, mission, plan, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(world, mission, plan, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_update(world, mission, plan, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(world, mission, plan, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan)
    {
        return begin_update(world, mission, plan, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context& __ctx)
    {
        return begin_update(world, mission, plan, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(world, mission, plan, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(world, mission, plan, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::RoboCompAGMExecutive::Callback_AGMExecutiveVisualizationTopic_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(world, mission, plan, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::RoboCompAGMWorldModel::World& world, const ::std::string& mission, const ::RoboCompPlanning::Plan& plan, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutiveVisualizationTopic_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(world, mission, plan, &__ctx, __del, __cookie);
    }

    void end_update(const ::Ice::AsyncResultPtr&);
    
private:

    void update(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_update(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_secure(bool __secure) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_twoway() const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_oneway() const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_batchOneway() const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_datagram() const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_batchDatagram() const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_compress(bool __compress) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveVisualizationTopic> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AGMExecutiveVisualizationTopic*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AGMExecutiveTopic : virtual public ::IceProxy::Ice::Object
{
public:

    void structuralChange(const ::RoboCompAGMWorldModel::World& w)
    {
        structuralChange(w, 0);
    }
    void structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context& __ctx)
    {
        structuralChange(w, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_structuralChange(w, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_structuralChange(w, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_structuralChange(w, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_structuralChange(w, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& w)
    {
        return begin_structuralChange(w, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context& __ctx)
    {
        return begin_structuralChange(w, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChange(w, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChange(w, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_structuralChangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChange(w, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& w, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_structuralChangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_structuralChange(w, &__ctx, __del, __cookie);
    }

    void end_structuralChange(const ::Ice::AsyncResultPtr&);
    
private:

    void structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification)
    {
        symbolUpdated(modification, 0);
    }
    void symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context& __ctx)
    {
        symbolUpdated(modification, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolUpdated(modification, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolUpdated(modification, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolUpdated(modification, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolUpdated(modification, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification)
    {
        return begin_symbolUpdated(modification, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context& __ctx)
    {
        return begin_symbolUpdated(modification, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdated(modification, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdated(modification, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_symbolUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdated(modification, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& modification, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_symbolUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolUpdated(modification, &__ctx, __del, __cookie);
    }

    void end_symbolUpdated(const ::Ice::AsyncResultPtr&);
    
private:

    void symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications)
    {
        symbolsUpdated(modifications, 0);
    }
    void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context& __ctx)
    {
        symbolsUpdated(modifications, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolsUpdated(modifications, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolsUpdated(modifications, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_symbolsUpdated(modifications, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_symbolsUpdated(modifications, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications)
    {
        return begin_symbolsUpdated(modifications, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context& __ctx)
    {
        return begin_symbolsUpdated(modifications, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdated(modifications, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdated(modifications, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_symbolsUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdated(modifications, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& modifications, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_symbolsUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_symbolsUpdated(modifications, &__ctx, __del, __cookie);
    }

    void end_symbolsUpdated(const ::Ice::AsyncResultPtr&);
    
private:

    void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification)
    {
        edgeUpdated(modification, 0);
    }
    void edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context& __ctx)
    {
        edgeUpdated(modification, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgeUpdated(modification, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgeUpdated(modification, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgeUpdated(modification, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgeUpdated(modification, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification)
    {
        return begin_edgeUpdated(modification, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context& __ctx)
    {
        return begin_edgeUpdated(modification, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdated(modification, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdated(modification, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_edgeUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdated(modification, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& modification, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_edgeUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgeUpdated(modification, &__ctx, __del, __cookie);
    }

    void end_edgeUpdated(const ::Ice::AsyncResultPtr&);
    
private:

    void edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications)
    {
        edgesUpdated(modifications, 0);
    }
    void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context& __ctx)
    {
        edgesUpdated(modifications, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgesUpdated(modifications, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgesUpdated(modifications, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_edgesUpdated(modifications, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_edgesUpdated(modifications, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications)
    {
        return begin_edgesUpdated(modifications, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context& __ctx)
    {
        return begin_edgesUpdated(modifications, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdated(modifications, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdated(modifications, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_edgesUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdated(modifications, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& modifications, const ::Ice::Context& __ctx, const ::RoboCompAGMExecutive::Callback_AGMExecutiveTopic_edgesUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_edgesUpdated(modifications, &__ctx, __del, __cookie);
    }

    void end_edgesUpdated(const ::Ice::AsyncResultPtr&);
    
private:

    void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_secure(bool __secure) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_twoway() const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_oneway() const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_batchOneway() const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_datagram() const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_batchDatagram() const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_compress(bool __compress) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AGMExecutiveTopic> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AGMExecutiveTopic*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompAGMExecutive
{

class AGMExecutive : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void structuralChangeProposal(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void symbolUpdate(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void edgeUpdate(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setMission(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompAGMWorldModel::World getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompAGMWorldModel::Node getNode(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getData(::RoboCompAGMWorldModel::World&, ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void broadcastModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void broadcastPlan(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class AGMExecutiveVisualizationTopic : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void update(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class AGMExecutiveTopic : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompAGMExecutive
{

class AGMExecutive : virtual public ::IceDelegate::RoboCompAGMExecutive::AGMExecutive,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void structuralChangeProposal(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolUpdate(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgeUpdate(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMission(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMWorldModel::World getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMWorldModel::Node getNode(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getData(::RoboCompAGMWorldModel::World&, ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void broadcastModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void broadcastPlan(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AGMExecutiveVisualizationTopic : virtual public ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic,
                                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void update(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AGMExecutiveTopic : virtual public ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic,
                          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompAGMExecutive
{

class AGMExecutive : virtual public ::IceDelegate::RoboCompAGMExecutive::AGMExecutive,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void structuralChangeProposal(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolUpdate(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgeUpdate(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMission(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMWorldModel::World getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMWorldModel::Node getNode(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getData(::RoboCompAGMWorldModel::World&, ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void broadcastModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void broadcastPlan(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AGMExecutiveVisualizationTopic : virtual public ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveVisualizationTopic,
                                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void update(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AGMExecutiveTopic : virtual public ::IceDelegate::RoboCompAGMExecutive::AGMExecutiveTopic,
                          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompAGMExecutive
{

class AGMExecutive : virtual public ::Ice::Object
{
public:

    typedef AGMExecutivePrx ProxyType;
    typedef AGMExecutivePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void activate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___activate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deactivate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deactivate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void structuralChangeProposal(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___structuralChangeProposal(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolUpdate(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___symbolUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___symbolsUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void edgeUpdate(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___edgeUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___edgesUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMission(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMission(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMWorldModel::World getModel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMWorldModel::Node getNode(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEdge(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getData(::RoboCompAGMWorldModel::World&, ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void broadcastModel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___broadcastModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void broadcastPlan(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___broadcastPlan(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AGMExecutive& l, const AGMExecutive& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AGMExecutive& l, const AGMExecutive& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AGMExecutiveVisualizationTopic : virtual public ::Ice::Object
{
public:

    typedef AGMExecutiveVisualizationTopicPrx ProxyType;
    typedef AGMExecutiveVisualizationTopicPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void update(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___update(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AGMExecutiveVisualizationTopic& l, const AGMExecutiveVisualizationTopic& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AGMExecutiveVisualizationTopic& l, const AGMExecutiveVisualizationTopic& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AGMExecutiveTopic : virtual public ::Ice::Object
{
public:

    typedef AGMExecutiveTopicPrx ProxyType;
    typedef AGMExecutiveTopicPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___structuralChange(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___symbolUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___symbolsUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___edgeUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___edgesUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AGMExecutiveTopic& l, const AGMExecutiveTopic& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AGMExecutiveTopic& l, const AGMExecutiveTopic& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompAGMExecutive
{

template<class T>
class CallbackNC_AGMExecutive_activate : public Callback_AGMExecutive_activate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_activate : public Callback_AGMExecutive_activate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_deactivate : public Callback_AGMExecutive_deactivate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_deactivate : public Callback_AGMExecutive_deactivate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_structuralChangeProposal : public Callback_AGMExecutive_structuralChangeProposal_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_structuralChangeProposal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_structuralChangeProposal(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_structuralChangeProposal : public Callback_AGMExecutive_structuralChangeProposal_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_structuralChangeProposal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_structuralChangeProposal(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_symbolUpdate : public Callback_AGMExecutive_symbolUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_symbolUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_symbolUpdate : public Callback_AGMExecutive_symbolUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_symbolUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_symbolsUpdate : public Callback_AGMExecutive_symbolsUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_symbolsUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_symbolsUpdate : public Callback_AGMExecutive_symbolsUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_symbolsUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_edgeUpdate : public Callback_AGMExecutive_edgeUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_edgeUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_edgeUpdate : public Callback_AGMExecutive_edgeUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_edgeUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_edgesUpdate : public Callback_AGMExecutive_edgesUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_edgesUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_edgesUpdate : public Callback_AGMExecutive_edgesUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_edgesUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_setMission : public Callback_AGMExecutive_setMission_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_setMission(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_setMission : public Callback_AGMExecutive_setMission_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_setMission(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_getModel : public Callback_AGMExecutive_getModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&);

    CallbackNC_AGMExecutive_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::World __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_getModel : public Callback_AGMExecutive_getModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&, const CT&);

    Callback_AGMExecutive_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::World __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_getNode : public Callback_AGMExecutive_getNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Node&);

    CallbackNC_AGMExecutive_getNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::Node __ret;
        try
        {
            __ret = __proxy->end_getNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_getNode : public Callback_AGMExecutive_getNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Node&, const CT&);

    Callback_AGMExecutive_getNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::Node __ret;
        try
        {
            __ret = __proxy->end_getNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_getEdge : public Callback_AGMExecutive_getEdge_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Edge&);

    CallbackNC_AGMExecutive_getEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::Edge __ret;
        try
        {
            __ret = __proxy->end_getEdge(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getEdge<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getEdge<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_getEdge : public Callback_AGMExecutive_getEdge_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Edge&, const CT&);

    Callback_AGMExecutive_getEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::Edge __ret;
        try
        {
            __ret = __proxy->end_getEdge(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getEdge<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getEdge<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_getData : public Callback_AGMExecutive_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&);

    CallbackNC_AGMExecutive_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::World world;
        ::std::string target;
        ::RoboCompPlanning::Plan plan;
        try
        {
            __proxy->end_getData(world, target, plan, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(world, target, plan);
        }
    }

    Response response;
};

template<class T> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_getData : public Callback_AGMExecutive_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const CT&);

    Callback_AGMExecutive_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompAGMExecutive::AGMExecutivePrx __proxy = ::RoboCompAGMExecutive::AGMExecutivePrx::uncheckedCast(__result->getProxy());
        ::RoboCompAGMWorldModel::World world;
        ::std::string target;
        ::RoboCompPlanning::Plan plan;
        try
        {
            __proxy->end_getData(world, target, plan, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(world, target, plan, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_broadcastModel : public Callback_AGMExecutive_broadcastModel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_broadcastModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_broadcastModel : public Callback_AGMExecutive_broadcastModel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_broadcastModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutive_broadcastPlan : public Callback_AGMExecutive_broadcastPlan_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_broadcastPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutive_broadcastPlan : public Callback_AGMExecutive_broadcastPlan_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_broadcastPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveVisualizationTopic_update : public Callback_AGMExecutiveVisualizationTopic_update_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveVisualizationTopic_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveVisualizationTopic_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveVisualizationTopic_update<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveVisualizationTopic_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveVisualizationTopic_update<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveVisualizationTopic_update : public Callback_AGMExecutiveVisualizationTopic_update_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveVisualizationTopic_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveVisualizationTopic_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveVisualizationTopic_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveVisualizationTopic_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveVisualizationTopic_updatePtr
newCallback_AGMExecutiveVisualizationTopic_update(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveVisualizationTopic_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_structuralChange : public Callback_AGMExecutiveTopic_structuralChange_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_structuralChange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_structuralChange : public Callback_AGMExecutiveTopic_structuralChange_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_structuralChange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_symbolUpdated : public Callback_AGMExecutiveTopic_symbolUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_symbolUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_symbolUpdated : public Callback_AGMExecutiveTopic_symbolUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_symbolUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_symbolsUpdated : public Callback_AGMExecutiveTopic_symbolsUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_symbolsUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_symbolsUpdated : public Callback_AGMExecutiveTopic_symbolsUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_symbolsUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_edgeUpdated : public Callback_AGMExecutiveTopic_edgeUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_edgeUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_edgeUpdated : public Callback_AGMExecutiveTopic_edgeUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_edgeUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_edgesUpdated : public Callback_AGMExecutiveTopic_edgesUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_edgesUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_edgesUpdated : public Callback_AGMExecutiveTopic_edgesUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_edgesUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
